swagger: "2.0"
info:
  description: "### We want to have a more flexible batch update api. The current GraphQL Batch Update API doesnâ€™t support doing mixed modifications in a single request. For example, if we wanted to give 3 tasks, 3 different modifications, we would have to create 3 different network requests. Instead, with REST, we would be able to do these batch modifications in a single network request. Not only with tasks, but in the future with other resources like projects. This is a sample server on localhost generated by Swagger."
  version: "1.0.0"
  title: "REST Batch Update"
  
host: "api.intuit.com"
basePath: "/v1"

tags:
- name: "task"
  description: "QBTM task"

schemes:
- "https"
- "http"

paths:
  /task/batch:
    post:
      tags:
      - "task"
      summary: "batch update multiple QBTM tasks"
      description: ""
      operationId: "batchUpdateTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The request entries to be processed in the batch update"
        required: true
        schema:
          $ref: "#/definitions/taskBatchRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/taskBatchResponse"
        "400":
          description: "Invalid batch update"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
definitions:
  taskBatchRequest:
    type: "object"
    required:
    - "entries"
    properties:
      entries:
        type: "array"
        items: 
          $ref: "#/definitions/taskBatchRequestEntry"
        example:
          - batchId: 0
            createdByAppId: "TaskManager"
            taskId: 13
            modifications: 
              name: "Test Task Name"
          - batchId: 1
            createdByAppId: "Task Manager"
            taskId: 99
            modifications:
              status: "Complete"
          - batchId: 2
            createdByAppId: "Task Manager"
            taskId: 13
            modifications:
              invalidMod: "test"
    xml:
      name: "taskBatchRequest"
  taskBatchRequestEntry:
    type: "object"
    required:
    - "batchId"
    - "createdByAppId"
    - "taskId"
    - "modifications"
    properties: 
      batchId:
        type: "integer"
      createdByAppId:
        type: "string"
      taskId:
        type: "integer"
      modifications:
        $ref: "#/definitions/taskModifications"
    xml:
      name: "taskBatchRequestEntry"
  taskBatchResponse:
    type: "object"
    properties:
      entries:
        type: "array"
        items: 
          $ref: "#/definitions/taskBatchResponseEntry"
        example:
        - batchId: 0
          status_code: 200
          task:
            id: 13
            name: "Test Task Name"
            description: "Test task"
            dueDate: "04/23/2023"
            status: "inProgress"
        - batchId: 1
          status_code: 400
          error_message: "Task with Id 99 does not exist"
        - batchId: 2
          status_code: 400
          error_message: "Invalid mutation called `invalidMod`"
    xml:
      name: "taskBatchResponse"
  taskBatchResponseEntry:
    description: "task and errors attribute are mutually exclusive. if errors exist, the task attribute will not exist (vice versa)."
    type: "object"
    required:
    - "batchId"
    - "status_code"
    properties: 
      batchId:
        type: "integer"
      status_code:
        type: "integer"
      task:
        $ref: "#/definitions/task"
      error_message:
        type: "string"
    xml:
      name: "taskBatchResponseEntry"
  taskModifications:
    description: "Requires size of atleast 1 modification"
    type: "object"
    properties:
      name: 
        type: "string"
      description: 
        type: "string"
      dueDate: 
        type: "string"
      assignee: 
        type: "string"
      status: 
        type: "string"
    xml:
      name: "taskModifications"
  task:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      dueDate:
        type: "string"
      completeDate:
        type: "string"
      status:
        type: "string"
    xml:
      name: "task"
      
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
